/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type BaseCollection = Account<BaseCollectionAccountData>;

export type BaseCollectionAccountData = {
  key: Key;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export type BaseCollectionAccountDataArgs = {
  key: KeyArgs;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export function getBaseCollectionAccountDataSerializer(): Serializer<
  BaseCollectionAccountDataArgs,
  BaseCollectionAccountData
> {
  return struct<BaseCollectionAccountData>(
    [
      ['key', getKeySerializer()],
      ['updateAuthority', publicKeySerializer()],
      ['name', string()],
      ['uri', string()],
      ['numMinted', u32()],
      ['currentSize', u32()],
    ],
    { description: 'BaseCollectionAccountData' }
  ) as Serializer<BaseCollectionAccountDataArgs, BaseCollectionAccountData>;
}

export function deserializeBaseCollection(
  rawAccount: RpcAccount
): BaseCollection {
  return deserializeAccount(
    rawAccount,
    getBaseCollectionAccountDataSerializer()
  );
}

export async function fetchBaseCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BaseCollection> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'BaseCollection');
  return deserializeBaseCollection(maybeAccount);
}

export async function safeFetchBaseCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BaseCollection | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeBaseCollection(maybeAccount) : null;
}

export async function fetchAllBaseCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BaseCollection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BaseCollection');
    return deserializeBaseCollection(maybeAccount);
  });
}

export async function safeFetchAllBaseCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BaseCollection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeBaseCollection(maybeAccount as RpcAccount)
    );
}

export function getBaseCollectionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      updateAuthority: PublicKey;
      name: string;
      uri: string;
      numMinted: number;
      currentSize: number;
    }>({
      key: [0, getKeySerializer()],
      updateAuthority: [1, publicKeySerializer()],
      name: [33, string()],
      uri: [null, string()],
      numMinted: [null, u32()],
      currentSize: [null, u32()],
    })
    .deserializeUsing<BaseCollection>((account) =>
      deserializeBaseCollection(account)
    );
}
