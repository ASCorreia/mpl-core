/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Interface, InterfaceArgs, getInterfaceSerializer } from '../types';

export type NonFungible = Account<NonFungibleAccountData>;

export type NonFungibleAccountData = {
  interface: Interface;
  updateAuthority: PublicKey;
  owner: PublicKey;
  name: string;
  uri: string;
};

export type NonFungibleAccountDataArgs = {
  updateAuthority: PublicKey;
  owner: PublicKey;
  name: string;
  uri: string;
};

export function getNonFungibleAccountDataSerializer(): Serializer<
  NonFungibleAccountDataArgs,
  NonFungibleAccountData
> {
  return mapSerializer<NonFungibleAccountDataArgs, any, NonFungibleAccountData>(
    struct<NonFungibleAccountData>(
      [
        ['interface', getInterfaceSerializer()],
        ['updateAuthority', publicKeySerializer()],
        ['owner', publicKeySerializer()],
        ['name', string()],
        ['uri', string()],
      ],
      { description: 'NonFungibleAccountData' }
    ),
    (value) => ({ ...value, interface: Interface.NonFungible })
  ) as Serializer<NonFungibleAccountDataArgs, NonFungibleAccountData>;
}

export function deserializeNonFungible(rawAccount: RpcAccount): NonFungible {
  return deserializeAccount(rawAccount, getNonFungibleAccountDataSerializer());
}

export async function fetchNonFungible(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NonFungible> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'NonFungible');
  return deserializeNonFungible(maybeAccount);
}

export async function safeFetchNonFungible(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NonFungible | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeNonFungible(maybeAccount) : null;
}

export async function fetchAllNonFungible(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NonFungible[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'NonFungible');
    return deserializeNonFungible(maybeAccount);
  });
}

export async function safeFetchAllNonFungible(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NonFungible[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeNonFungible(maybeAccount as RpcAccount));
}

export function getNonFungibleGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplAsset',
    'ASSETp3DinZKfiAyvdQG16YWWLJ2X3ZKjg9zku7n1sZD'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      interface: InterfaceArgs;
      updateAuthority: PublicKey;
      owner: PublicKey;
      name: string;
      uri: string;
    }>({
      interface: [0, getInterfaceSerializer()],
      updateAuthority: [1, publicKeySerializer()],
      owner: [33, publicKeySerializer()],
      name: [65, string()],
      uri: [null, string()],
    })
    .deserializeUsing<NonFungible>((account) => deserializeNonFungible(account))
    .whereField('interface', Interface.NonFungible);
}
