/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  publicKey as publicKeySerializer,
  string,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  CollectionAccountData,
  getCollectionAccountDataSerializer,
} from '../../hooked';
import { KeyArgs, getKeySerializer } from '../types';

export type Collection = Account<CollectionAccountData>;

export function deserializeCollection(rawAccount: RpcAccount): Collection {
  return deserializeAccount(rawAccount, getCollectionAccountDataSerializer());
}

export async function fetchCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Collection> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Collection');
  return deserializeCollection(maybeAccount);
}

export async function safeFetchCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Collection | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCollection(maybeAccount) : null;
}

export async function fetchAllCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Collection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Collection');
    return deserializeCollection(maybeAccount);
  });
}

export async function safeFetchAllCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Collection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCollection(maybeAccount as RpcAccount));
}

export function getCollectionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      updateAuthority: PublicKey;
      name: string;
      uri: string;
      numMinted: number;
      currentSize: number;
    }>({
      key: [0, getKeySerializer()],
      updateAuthority: [1, publicKeySerializer()],
      name: [33, string()],
      uri: [null, string()],
      numMinted: [null, u32()],
      currentSize: [null, u32()],
    })
    .deserializeUsing<Collection>((account) => deserializeCollection(account));
}
