/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ExternalPluginRecord,
  ExternalPluginRecordArgs,
  Key,
  KeyArgs,
  RegistryRecord,
  RegistryRecordArgs,
  getExternalPluginRecordSerializer,
  getKeySerializer,
  getRegistryRecordSerializer,
} from '../types';

export type PluginRegistry = Account<PluginRegistryAccountData>;

export type PluginRegistryAccountData = {
  key: Key;
  registry: Array<RegistryRecord>;
  externalPlugins: Array<ExternalPluginRecord>;
};

export type PluginRegistryAccountDataArgs = {
  key: KeyArgs;
  registry: Array<RegistryRecordArgs>;
  externalPlugins: Array<ExternalPluginRecordArgs>;
};

export function getPluginRegistryAccountDataSerializer(): Serializer<
  PluginRegistryAccountDataArgs,
  PluginRegistryAccountData
> {
  return struct<PluginRegistryAccountData>(
    [
      ['key', getKeySerializer()],
      ['registry', array(getRegistryRecordSerializer())],
      ['externalPlugins', array(getExternalPluginRecordSerializer())],
    ],
    { description: 'PluginRegistryAccountData' }
  ) as Serializer<PluginRegistryAccountDataArgs, PluginRegistryAccountData>;
}

export function deserializePluginRegistry(
  rawAccount: RpcAccount
): PluginRegistry {
  return deserializeAccount(
    rawAccount,
    getPluginRegistryAccountDataSerializer()
  );
}

export async function fetchPluginRegistry(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginRegistry> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PluginRegistry');
  return deserializePluginRegistry(maybeAccount);
}

export async function safeFetchPluginRegistry(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginRegistry | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePluginRegistry(maybeAccount) : null;
}

export async function fetchAllPluginRegistry(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginRegistry[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PluginRegistry');
    return deserializePluginRegistry(maybeAccount);
  });
}

export async function safeFetchAllPluginRegistry(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginRegistry[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePluginRegistry(maybeAccount as RpcAccount)
    );
}

export function getPluginRegistryGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplAsset',
    'ASSETp3DinZKfiAyvdQG16YWWLJ2X3ZKjg9zku7n1sZD'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      registry: Array<RegistryRecordArgs>;
      externalPlugins: Array<ExternalPluginRecordArgs>;
    }>({
      key: [0, getKeySerializer()],
      registry: [1, array(getRegistryRecordSerializer())],
      externalPlugins: [null, array(getExternalPluginRecordSerializer())],
    })
    .deserializeUsing<PluginRegistry>((account) =>
      deserializePluginRegistry(account)
    );
}
