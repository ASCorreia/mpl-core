/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import { Serializer, struct, u32 } from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type PluginHeader = Account<PluginHeaderAccountData>;

export type PluginHeaderAccountData = {
  key: Key;
  pluginRegistryOffset: number;
};

export type PluginHeaderAccountDataArgs = {
  key: KeyArgs;
  pluginRegistryOffset: number;
};

export function getPluginHeaderAccountDataSerializer(): Serializer<
  PluginHeaderAccountDataArgs,
  PluginHeaderAccountData
> {
  return struct<PluginHeaderAccountData>(
    [
      ['key', getKeySerializer()],
      ['pluginRegistryOffset', u32()],
    ],
    { description: 'PluginHeaderAccountData' }
  ) as Serializer<PluginHeaderAccountDataArgs, PluginHeaderAccountData>;
}

export function deserializePluginHeader(rawAccount: RpcAccount): PluginHeader {
  return deserializeAccount(rawAccount, getPluginHeaderAccountDataSerializer());
}

export async function fetchPluginHeader(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginHeader> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PluginHeader');
  return deserializePluginHeader(maybeAccount);
}

export async function safeFetchPluginHeader(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginHeader | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePluginHeader(maybeAccount) : null;
}

export async function fetchAllPluginHeader(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginHeader[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PluginHeader');
    return deserializePluginHeader(maybeAccount);
  });
}

export async function safeFetchAllPluginHeader(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginHeader[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePluginHeader(maybeAccount as RpcAccount));
}

export function getPluginHeaderGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCoreProgram',
    'CoREzp6dAdLVRKf3EM5tWrsXM2jQwRFeu5uhzsAyjYXL'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ key: KeyArgs; pluginRegistryOffset: number }>({
      key: [0, getKeySerializer()],
      pluginRegistryOffset: [1, u32()],
    })
    .deserializeUsing<PluginHeader>((account) =>
      deserializePluginHeader(account)
    );
}

export function getPluginHeaderSize(): number {
  return 5;
}
