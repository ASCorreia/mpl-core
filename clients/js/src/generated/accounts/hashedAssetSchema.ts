/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { PluginHash, PluginHashArgs, getPluginHashSerializer } from '../types';

export type HashedAssetSchema = Account<HashedAssetSchemaAccountData>;

export type HashedAssetSchemaAccountData = {
  assetHash: Uint8Array;
  pluginHashes: Array<PluginHash>;
};

export type HashedAssetSchemaAccountDataArgs = {
  assetHash: Uint8Array;
  pluginHashes: Array<PluginHashArgs>;
};

export function getHashedAssetSchemaAccountDataSerializer(): Serializer<
  HashedAssetSchemaAccountDataArgs,
  HashedAssetSchemaAccountData
> {
  return struct<HashedAssetSchemaAccountData>(
    [
      ['assetHash', bytes({ size: 32 })],
      ['pluginHashes', array(getPluginHashSerializer())],
    ],
    { description: 'HashedAssetSchemaAccountData' }
  ) as Serializer<
    HashedAssetSchemaAccountDataArgs,
    HashedAssetSchemaAccountData
  >;
}

export function deserializeHashedAssetSchema(
  rawAccount: RpcAccount
): HashedAssetSchema {
  return deserializeAccount(
    rawAccount,
    getHashedAssetSchemaAccountDataSerializer()
  );
}

export async function fetchHashedAssetSchema(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<HashedAssetSchema> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'HashedAssetSchema');
  return deserializeHashedAssetSchema(maybeAccount);
}

export async function safeFetchHashedAssetSchema(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<HashedAssetSchema | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeHashedAssetSchema(maybeAccount)
    : null;
}

export async function fetchAllHashedAssetSchema(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<HashedAssetSchema[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'HashedAssetSchema');
    return deserializeHashedAssetSchema(maybeAccount);
  });
}

export async function safeFetchAllHashedAssetSchema(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<HashedAssetSchema[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeHashedAssetSchema(maybeAccount as RpcAccount)
    );
}

export function getHashedAssetSchemaGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplAsset',
    'ASSETp3DinZKfiAyvdQG16YWWLJ2X3ZKjg9zku7n1sZD'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      assetHash: Uint8Array;
      pluginHashes: Array<PluginHashArgs>;
    }>({
      assetHash: [0, bytes({ size: 32 })],
      pluginHashes: [32, array(getPluginHashSerializer())],
    })
    .deserializeUsing<HashedAssetSchema>((account) =>
      deserializeHashedAssetSchema(account)
    );
}
