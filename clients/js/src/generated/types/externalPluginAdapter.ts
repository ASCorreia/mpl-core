/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseAppData,
  BaseAppDataArgs,
  BaseAssetLinkedAppData,
  BaseAssetLinkedAppDataArgs,
  BaseAssetLinkedLifecycleHook,
  BaseAssetLinkedLifecycleHookArgs,
  BaseDataSection,
  BaseDataSectionArgs,
  BaseLifecycleHook,
  BaseLifecycleHookArgs,
  BaseOracle,
  BaseOracleArgs,
  getBaseAppDataSerializer,
  getBaseAssetLinkedAppDataSerializer,
  getBaseAssetLinkedLifecycleHookSerializer,
  getBaseDataSectionSerializer,
  getBaseLifecycleHookSerializer,
  getBaseOracleSerializer,
} from '.';

export type ExternalPluginAdapter =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHook] }
  | { __kind: 'Oracle'; fields: [BaseOracle] }
  | {
      __kind: 'AssetLinkedLifecycleHook';
      fields: [BaseAssetLinkedLifecycleHook];
    }
  | { __kind: 'AppData'; fields: [BaseAppData] }
  | { __kind: 'AssetLinkedAppData'; fields: [BaseAssetLinkedAppData] }
  | { __kind: 'DataSection'; fields: [BaseDataSection] };

export type ExternalPluginAdapterArgs =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookArgs] }
  | { __kind: 'Oracle'; fields: [BaseOracleArgs] }
  | {
      __kind: 'AssetLinkedLifecycleHook';
      fields: [BaseAssetLinkedLifecycleHookArgs];
    }
  | { __kind: 'AppData'; fields: [BaseAppDataArgs] }
  | { __kind: 'AssetLinkedAppData'; fields: [BaseAssetLinkedAppDataArgs] }
  | { __kind: 'DataSection'; fields: [BaseDataSectionArgs] };

export function getExternalPluginAdapterSerializer(): Serializer<
  ExternalPluginAdapterArgs,
  ExternalPluginAdapter
> {
  return dataEnum<ExternalPluginAdapter>(
    [
      [
        'LifecycleHook',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'LifecycleHook'>>([
          ['fields', tuple([getBaseLifecycleHookSerializer()])],
        ]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'Oracle'>>([
          ['fields', tuple([getBaseOracleSerializer()])],
        ]),
      ],
      [
        'AssetLinkedLifecycleHook',
        struct<
          GetDataEnumKindContent<
            ExternalPluginAdapter,
            'AssetLinkedLifecycleHook'
          >
        >([['fields', tuple([getBaseAssetLinkedLifecycleHookSerializer()])]]),
      ],
      [
        'AppData',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'AppData'>>([
          ['fields', tuple([getBaseAppDataSerializer()])],
        ]),
      ],
      [
        'AssetLinkedAppData',
        struct<
          GetDataEnumKindContent<ExternalPluginAdapter, 'AssetLinkedAppData'>
        >([['fields', tuple([getBaseAssetLinkedAppDataSerializer()])]]),
      ],
      [
        'DataSection',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'DataSection'>>([
          ['fields', tuple([getBaseDataSectionSerializer()])],
        ]),
      ],
    ],
    { description: 'ExternalPluginAdapter' }
  ) as Serializer<ExternalPluginAdapterArgs, ExternalPluginAdapter>;
}

// Data Enum Helpers.
export function externalPluginAdapter(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'LifecycleHook'>;
export function externalPluginAdapter(
  kind: 'Oracle',
  data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'Oracle'>['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'Oracle'>;
export function externalPluginAdapter(
  kind: 'AssetLinkedLifecycleHook',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'AssetLinkedLifecycleHook'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'AssetLinkedLifecycleHook'>;
export function externalPluginAdapter(
  kind: 'AppData',
  data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'AppData'>['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'AppData'>;
export function externalPluginAdapter(
  kind: 'AssetLinkedAppData',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'AssetLinkedAppData'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'AssetLinkedAppData'>;
export function externalPluginAdapter(
  kind: 'DataSection',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'DataSection'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'DataSection'>;
export function externalPluginAdapter<
  K extends ExternalPluginAdapterArgs['__kind'],
>(kind: K, data?: any): Extract<ExternalPluginAdapterArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExternalPluginAdapter<
  K extends ExternalPluginAdapter['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapter
): value is ExternalPluginAdapter & { __kind: K } {
  return value.__kind === kind;
}
