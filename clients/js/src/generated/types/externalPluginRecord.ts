/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Serializer,
  array,
  struct,
  tuple,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  CheckResult,
  CheckResultArgs,
  LifecycleEvent,
  LifecycleEventArgs,
  PluginAuthority,
  PluginAuthorityArgs,
  getCheckResultSerializer,
  getLifecycleEventSerializer,
  getPluginAuthoritySerializer,
} from '.';

export type ExternalPluginRecord = {
  authority: PluginAuthority;
  offset: bigint;
  permissions: Array<[LifecycleEvent, CheckResult]>;
};

export type ExternalPluginRecordArgs = {
  authority: PluginAuthorityArgs;
  offset: number | bigint;
  permissions: Array<[LifecycleEventArgs, CheckResultArgs]>;
};

export function getExternalPluginRecordSerializer(): Serializer<
  ExternalPluginRecordArgs,
  ExternalPluginRecord
> {
  return struct<ExternalPluginRecord>(
    [
      ['authority', getPluginAuthoritySerializer()],
      ['offset', u64()],
      [
        'permissions',
        array(
          tuple([getLifecycleEventSerializer(), getCheckResultSerializer()])
        ),
      ],
    ],
    { description: 'ExternalPluginRecord' }
  ) as Serializer<ExternalPluginRecordArgs, ExternalPluginRecord>;
}
