/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  struct,
  tuple,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ExternalCheckResult,
  ExternalCheckResultArgs,
  ExternalPluginSchema,
  ExternalPluginSchemaArgs,
  ExtraAccount,
  ExtraAccountArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  getExternalCheckResultSerializer,
  getExternalPluginSchemaSerializer,
  getExtraAccountSerializer,
  getHookableLifecycleEventSerializer,
} from '.';

export type LifecycleHookUpdateInfo = {
  lifecycleChecks: Option<Array<[HookableLifecycleEvent, ExternalCheckResult]>>;
  extraAccounts: Option<Array<ExtraAccount>>;
  schema: Option<ExternalPluginSchema>;
  maxSize: bigint;
};

export type LifecycleHookUpdateInfoArgs = {
  lifecycleChecks: OptionOrNullable<
    Array<[HookableLifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  extraAccounts: OptionOrNullable<Array<ExtraAccountArgs>>;
  schema: OptionOrNullable<ExternalPluginSchemaArgs>;
  maxSize: number | bigint;
};

export function getLifecycleHookUpdateInfoSerializer(): Serializer<
  LifecycleHookUpdateInfoArgs,
  LifecycleHookUpdateInfo
> {
  return struct<LifecycleHookUpdateInfo>(
    [
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getHookableLifecycleEventSerializer(),
              getExternalCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['extraAccounts', option(array(getExtraAccountSerializer()))],
      ['schema', option(getExternalPluginSchemaSerializer())],
      ['maxSize', u64()],
    ],
    { description: 'LifecycleHookUpdateInfo' }
  ) as Serializer<LifecycleHookUpdateInfoArgs, LifecycleHookUpdateInfo>;
}
