/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  getBasePluginAuthoritySerializer,
} from '.';

export type LinkedDataKey =
  | { __kind: 'AssetLinkedLifecycleHook'; fields: [PublicKey] }
  | { __kind: 'AssetLinkedSecureDataStore'; fields: [BasePluginAuthority] };

export type LinkedDataKeyArgs =
  | { __kind: 'AssetLinkedLifecycleHook'; fields: [PublicKey] }
  | { __kind: 'AssetLinkedSecureDataStore'; fields: [BasePluginAuthorityArgs] };

export function getLinkedDataKeySerializer(): Serializer<
  LinkedDataKeyArgs,
  LinkedDataKey
> {
  return dataEnum<LinkedDataKey>(
    [
      [
        'AssetLinkedLifecycleHook',
        struct<
          GetDataEnumKindContent<LinkedDataKey, 'AssetLinkedLifecycleHook'>
        >([['fields', tuple([publicKeySerializer()])]]),
      ],
      [
        'AssetLinkedSecureDataStore',
        struct<
          GetDataEnumKindContent<LinkedDataKey, 'AssetLinkedSecureDataStore'>
        >([['fields', tuple([getBasePluginAuthoritySerializer()])]]),
      ],
    ],
    { description: 'LinkedDataKey' }
  ) as Serializer<LinkedDataKeyArgs, LinkedDataKey>;
}

// Data Enum Helpers.
export function linkedDataKey(
  kind: 'AssetLinkedLifecycleHook',
  data: GetDataEnumKindContent<
    LinkedDataKeyArgs,
    'AssetLinkedLifecycleHook'
  >['fields']
): GetDataEnumKind<LinkedDataKeyArgs, 'AssetLinkedLifecycleHook'>;
export function linkedDataKey(
  kind: 'AssetLinkedSecureDataStore',
  data: GetDataEnumKindContent<
    LinkedDataKeyArgs,
    'AssetLinkedSecureDataStore'
  >['fields']
): GetDataEnumKind<LinkedDataKeyArgs, 'AssetLinkedSecureDataStore'>;
export function linkedDataKey<K extends LinkedDataKeyArgs['__kind']>(
  kind: K,
  data?: any
): Extract<LinkedDataKeyArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isLinkedDataKey<K extends LinkedDataKey['__kind']>(
  kind: K,
  value: LinkedDataKey
): value is LinkedDataKey & { __kind: K } {
  return value.__kind === kind;
}
