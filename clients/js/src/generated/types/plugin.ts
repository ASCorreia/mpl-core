/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';
import {
  Collection,
  CollectionArgs,
  Delegate,
  DelegateArgs,
  Royalties,
  RoyaltiesArgs,
  getCollectionSerializer,
  getDelegateSerializer,
  getRoyaltiesSerializer,
} from '.';

export type Plugin =
  | { __kind: 'Reserved' }
  | { __kind: 'Royalties'; fields: [Royalties] }
  | { __kind: 'Delegate'; fields: [Delegate] }
  | { __kind: 'Collection'; fields: [Collection] };

export type PluginArgs =
  | { __kind: 'Reserved' }
  | { __kind: 'Royalties'; fields: [RoyaltiesArgs] }
  | { __kind: 'Delegate'; fields: [DelegateArgs] }
  | { __kind: 'Collection'; fields: [CollectionArgs] };

export function getPluginSerializer(): Serializer<PluginArgs, Plugin> {
  return dataEnum<Plugin>(
    [
      ['Reserved', unit()],
      [
        'Royalties',
        struct<GetDataEnumKindContent<Plugin, 'Royalties'>>([
          ['fields', tuple([getRoyaltiesSerializer()])],
        ]),
      ],
      [
        'Delegate',
        struct<GetDataEnumKindContent<Plugin, 'Delegate'>>([
          ['fields', tuple([getDelegateSerializer()])],
        ]),
      ],
      [
        'Collection',
        struct<GetDataEnumKindContent<Plugin, 'Collection'>>([
          ['fields', tuple([getCollectionSerializer()])],
        ]),
      ],
    ],
    { description: 'Plugin' }
  ) as Serializer<PluginArgs, Plugin>;
}

// Data Enum Helpers.
export function plugin(
  kind: 'Reserved'
): GetDataEnumKind<PluginArgs, 'Reserved'>;
export function plugin(
  kind: 'Royalties',
  data: GetDataEnumKindContent<PluginArgs, 'Royalties'>['fields']
): GetDataEnumKind<PluginArgs, 'Royalties'>;
export function plugin(
  kind: 'Delegate',
  data: GetDataEnumKindContent<PluginArgs, 'Delegate'>['fields']
): GetDataEnumKind<PluginArgs, 'Delegate'>;
export function plugin(
  kind: 'Collection',
  data: GetDataEnumKindContent<PluginArgs, 'Collection'>['fields']
): GetDataEnumKind<PluginArgs, 'Collection'>;
export function plugin<K extends PluginArgs['__kind']>(
  kind: K,
  data?: any
): Extract<PluginArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isPlugin<K extends Plugin['__kind']>(
  kind: K,
  value: Plugin
): value is Plugin & { __kind: K } {
  return value.__kind === kind;
}
