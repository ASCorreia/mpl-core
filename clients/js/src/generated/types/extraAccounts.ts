/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type ExtraAccounts =
  | { __kind: 'None' }
  | { __kind: 'SplHook'; extraAccountMetas: PublicKey }
  | {
      __kind: 'MplHook';
      mintPda: Option<PublicKey>;
      collectionPda: Option<PublicKey>;
      ownerPda: Option<PublicKey>;
    };

export type ExtraAccountsArgs =
  | { __kind: 'None' }
  | { __kind: 'SplHook'; extraAccountMetas: PublicKey }
  | {
      __kind: 'MplHook';
      mintPda: OptionOrNullable<PublicKey>;
      collectionPda: OptionOrNullable<PublicKey>;
      ownerPda: OptionOrNullable<PublicKey>;
    };

export function getExtraAccountsSerializer(): Serializer<
  ExtraAccountsArgs,
  ExtraAccounts
> {
  return dataEnum<ExtraAccounts>(
    [
      ['None', unit()],
      [
        'SplHook',
        struct<GetDataEnumKindContent<ExtraAccounts, 'SplHook'>>([
          ['extraAccountMetas', publicKeySerializer()],
        ]),
      ],
      [
        'MplHook',
        struct<GetDataEnumKindContent<ExtraAccounts, 'MplHook'>>([
          ['mintPda', option(publicKeySerializer())],
          ['collectionPda', option(publicKeySerializer())],
          ['ownerPda', option(publicKeySerializer())],
        ]),
      ],
    ],
    { description: 'ExtraAccounts' }
  ) as Serializer<ExtraAccountsArgs, ExtraAccounts>;
}

// Data Enum Helpers.
export function extraAccounts(
  kind: 'None'
): GetDataEnumKind<ExtraAccountsArgs, 'None'>;
export function extraAccounts(
  kind: 'SplHook',
  data: GetDataEnumKindContent<ExtraAccountsArgs, 'SplHook'>
): GetDataEnumKind<ExtraAccountsArgs, 'SplHook'>;
export function extraAccounts(
  kind: 'MplHook',
  data: GetDataEnumKindContent<ExtraAccountsArgs, 'MplHook'>
): GetDataEnumKind<ExtraAccountsArgs, 'MplHook'>;
export function extraAccounts<K extends ExtraAccountsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<ExtraAccountsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExtraAccounts<K extends ExtraAccounts['__kind']>(
  kind: K,
  value: ExtraAccounts
): value is ExtraAccounts & { __kind: K } {
  return value.__kind === kind;
}
