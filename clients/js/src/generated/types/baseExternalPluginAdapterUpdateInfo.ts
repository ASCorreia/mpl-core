/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseAppDataUpdateInfo,
  BaseAppDataUpdateInfoArgs,
  BaseAssetLinkedAppDataUpdateInfo,
  BaseAssetLinkedAppDataUpdateInfoArgs,
  BaseLifecycleHookUpdateInfo,
  BaseLifecycleHookUpdateInfoArgs,
  BaseOracleUpdateInfo,
  BaseOracleUpdateInfoArgs,
  getBaseAppDataUpdateInfoSerializer,
  getBaseAssetLinkedAppDataUpdateInfoSerializer,
  getBaseLifecycleHookUpdateInfoSerializer,
  getBaseOracleUpdateInfoSerializer,
} from '.';

export type BaseExternalPluginAdapterUpdateInfo =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookUpdateInfo] }
  | { __kind: 'Oracle'; fields: [BaseOracleUpdateInfo] }
  | { __kind: 'AppData'; fields: [BaseAppDataUpdateInfo] }
  | {
      __kind: 'AssetLinkedAppData';
      fields: [BaseAssetLinkedAppDataUpdateInfo];
    };

export type BaseExternalPluginAdapterUpdateInfoArgs =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookUpdateInfoArgs] }
  | { __kind: 'Oracle'; fields: [BaseOracleUpdateInfoArgs] }
  | { __kind: 'AppData'; fields: [BaseAppDataUpdateInfoArgs] }
  | {
      __kind: 'AssetLinkedAppData';
      fields: [BaseAssetLinkedAppDataUpdateInfoArgs];
    };

export function getBaseExternalPluginAdapterUpdateInfoSerializer(): Serializer<
  BaseExternalPluginAdapterUpdateInfoArgs,
  BaseExternalPluginAdapterUpdateInfo
> {
  return dataEnum<BaseExternalPluginAdapterUpdateInfo>(
    [
      [
        'LifecycleHook',
        struct<
          GetDataEnumKindContent<
            BaseExternalPluginAdapterUpdateInfo,
            'LifecycleHook'
          >
        >([['fields', tuple([getBaseLifecycleHookUpdateInfoSerializer()])]]),
      ],
      [
        'Oracle',
        struct<
          GetDataEnumKindContent<BaseExternalPluginAdapterUpdateInfo, 'Oracle'>
        >([['fields', tuple([getBaseOracleUpdateInfoSerializer()])]]),
      ],
      [
        'AppData',
        struct<
          GetDataEnumKindContent<BaseExternalPluginAdapterUpdateInfo, 'AppData'>
        >([['fields', tuple([getBaseAppDataUpdateInfoSerializer()])]]),
      ],
      [
        'AssetLinkedAppData',
        struct<
          GetDataEnumKindContent<
            BaseExternalPluginAdapterUpdateInfo,
            'AssetLinkedAppData'
          >
        >([
          ['fields', tuple([getBaseAssetLinkedAppDataUpdateInfoSerializer()])],
        ]),
      ],
    ],
    { description: 'BaseExternalPluginAdapterUpdateInfo' }
  ) as Serializer<
    BaseExternalPluginAdapterUpdateInfoArgs,
    BaseExternalPluginAdapterUpdateInfo
  >;
}

// Data Enum Helpers.
export function baseExternalPluginAdapterUpdateInfo(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    BaseExternalPluginAdapterUpdateInfoArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<BaseExternalPluginAdapterUpdateInfoArgs, 'LifecycleHook'>;
export function baseExternalPluginAdapterUpdateInfo(
  kind: 'Oracle',
  data: GetDataEnumKindContent<
    BaseExternalPluginAdapterUpdateInfoArgs,
    'Oracle'
  >['fields']
): GetDataEnumKind<BaseExternalPluginAdapterUpdateInfoArgs, 'Oracle'>;
export function baseExternalPluginAdapterUpdateInfo(
  kind: 'AppData',
  data: GetDataEnumKindContent<
    BaseExternalPluginAdapterUpdateInfoArgs,
    'AppData'
  >['fields']
): GetDataEnumKind<BaseExternalPluginAdapterUpdateInfoArgs, 'AppData'>;
export function baseExternalPluginAdapterUpdateInfo(
  kind: 'AssetLinkedAppData',
  data: GetDataEnumKindContent<
    BaseExternalPluginAdapterUpdateInfoArgs,
    'AssetLinkedAppData'
  >['fields']
): GetDataEnumKind<
  BaseExternalPluginAdapterUpdateInfoArgs,
  'AssetLinkedAppData'
>;
export function baseExternalPluginAdapterUpdateInfo<
  K extends BaseExternalPluginAdapterUpdateInfoArgs['__kind'],
>(
  kind: K,
  data?: any
): Extract<BaseExternalPluginAdapterUpdateInfoArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseExternalPluginAdapterUpdateInfo<
  K extends BaseExternalPluginAdapterUpdateInfo['__kind'],
>(
  kind: K,
  value: BaseExternalPluginAdapterUpdateInfo
): value is BaseExternalPluginAdapterUpdateInfo & { __kind: K } {
  return value.__kind === kind;
}
