/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  DataState,
  DataStateArgs,
  MigrationLevel,
  MigrationLevelArgs,
  getDataStateSerializer,
  getMigrationLevelSerializer,
} from '../types';

// Accounts.
export type MigrateInstructionAccounts = {
  /** The address of the new asset */
  assetAddress: Signer;
  /** The authority of the new asset */
  owner?: Signer;
  /** The account paying for the storage fees */
  payer?: Signer;
  /** mpl-token-metadata collection metadata or mpl-asset collection */
  collection?: PublicKey | Pda;
  /** Token account */
  token: PublicKey | Pda;
  /** Mint of token asset */
  mint: PublicKey | Pda;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** Edition of token asset */
  edition: PublicKey | Pda;
  /** Owner token record account */
  ownerTokenRecord?: PublicKey | Pda;
  /** SPL Token Program */
  splTokenProgram?: PublicKey | Pda;
  /** SPL Associated Token Account program */
  splAtaProgram?: PublicKey | Pda;
  /** The system program */
  systemProgram?: PublicKey | Pda;
  /** The SPL Noop Program */
  logWrapper?: PublicKey | Pda;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: PublicKey | Pda;
  /** Token Authorization Rules account */
  authorizationRules?: PublicKey | Pda;
};

// Data.
export type MigrateInstructionData = {
  discriminator: number;
  dataState: DataState;
  level: MigrationLevel;
};

export type MigrateInstructionDataArgs = {
  dataState: DataStateArgs;
  level: MigrationLevelArgs;
};

export function getMigrateInstructionDataSerializer(): Serializer<
  MigrateInstructionDataArgs,
  MigrateInstructionData
> {
  return mapSerializer<MigrateInstructionDataArgs, any, MigrateInstructionData>(
    struct<MigrateInstructionData>(
      [
        ['discriminator', u8()],
        ['dataState', getDataStateSerializer()],
        ['level', getMigrationLevelSerializer()],
      ],
      { description: 'MigrateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<MigrateInstructionDataArgs, MigrateInstructionData>;
}

// Args.
export type MigrateInstructionArgs = MigrateInstructionDataArgs;

// Instruction.
export function migrate(
  context: Pick<Context, 'payer' | 'programs'>,
  input: MigrateInstructionAccounts & MigrateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplAsset',
    'ASSETp3DinZKfiAyvdQG16YWWLJ2X3ZKjg9zku7n1sZD'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    assetAddress: {
      index: 0,
      isWritable: true,
      value: input.assetAddress ?? null,
    },
    owner: { index: 1, isWritable: false, value: input.owner ?? null },
    payer: { index: 2, isWritable: true, value: input.payer ?? null },
    collection: { index: 3, isWritable: true, value: input.collection ?? null },
    token: { index: 4, isWritable: true, value: input.token ?? null },
    mint: { index: 5, isWritable: true, value: input.mint ?? null },
    metadata: { index: 6, isWritable: true, value: input.metadata ?? null },
    edition: { index: 7, isWritable: true, value: input.edition ?? null },
    ownerTokenRecord: {
      index: 8,
      isWritable: true,
      value: input.ownerTokenRecord ?? null,
    },
    splTokenProgram: {
      index: 9,
      isWritable: false,
      value: input.splTokenProgram ?? null,
    },
    splAtaProgram: {
      index: 10,
      isWritable: false,
      value: input.splAtaProgram ?? null,
    },
    systemProgram: {
      index: 11,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    logWrapper: {
      index: 12,
      isWritable: false,
      value: input.logWrapper ?? null,
    },
    authorizationRulesProgram: {
      index: 13,
      isWritable: false,
      value: input.authorizationRulesProgram ?? null,
    },
    authorizationRules: {
      index: 14,
      isWritable: false,
      value: input.authorizationRules ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: MigrateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.splTokenProgram.value) {
    resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.splTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.splAtaProgram.value) {
    resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey(
      'splAssociatedToken',
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
    resolvedAccounts.splAtaProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMigrateInstructionDataSerializer().serialize(
    resolvedArgs as MigrateInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
