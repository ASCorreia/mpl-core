/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCollectionSignerPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ExecuteCollectionV1InstructionAccounts = {
  /** The address of the collection */
  collection: PublicKey | Pda;
  /** The signing PDA for the collection */
  collectionSigner?: PublicKey | Pda;
  /** The account paying for the storage fees */
  payer?: Signer;
  /** The authority of the collection */
  authority?: Signer;
};

// Data.
export type ExecuteCollectionV1InstructionData = {
  discriminator: number;
  programId: PublicKey;
  instructionData: Uint8Array;
};

export type ExecuteCollectionV1InstructionDataArgs = {
  programId: PublicKey;
  instructionData: Uint8Array;
};

export function getExecuteCollectionV1InstructionDataSerializer(): Serializer<
  ExecuteCollectionV1InstructionDataArgs,
  ExecuteCollectionV1InstructionData
> {
  return mapSerializer<
    ExecuteCollectionV1InstructionDataArgs,
    any,
    ExecuteCollectionV1InstructionData
  >(
    struct<ExecuteCollectionV1InstructionData>(
      [
        ['discriminator', u8()],
        ['programId', publicKeySerializer()],
        ['instructionData', bytes({ size: u32() })],
      ],
      { description: 'ExecuteCollectionV1InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 32 })
  ) as Serializer<
    ExecuteCollectionV1InstructionDataArgs,
    ExecuteCollectionV1InstructionData
  >;
}

// Args.
export type ExecuteCollectionV1InstructionArgs =
  ExecuteCollectionV1InstructionDataArgs;

// Instruction.
export function executeCollectionV1(
  context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
  input: ExecuteCollectionV1InstructionAccounts &
    ExecuteCollectionV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    collection: {
      index: 0,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    collectionSigner: {
      index: 1,
      isWritable: false as boolean,
      value: input.collectionSigner ?? null,
    },
    payer: {
      index: 2,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    authority: {
      index: 3,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ExecuteCollectionV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.collectionSigner.value) {
    resolvedAccounts.collectionSigner.value = findCollectionSignerPda(context, {
      collection: expectPublicKey(resolvedAccounts.collection.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getExecuteCollectionV1InstructionDataSerializer().serialize(
    resolvedArgs as ExecuteCollectionV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
